package rpc

type MRPC_PACKAGE_PROTOCOL uint8
type MRPC_PACKAGE_COMPRESS uint8
type MRPC_PACKAGE_STATUS_CODE uint8

type MRPC_NETWORK_PROTOCOL uint8

type RESPONSE_STATUS uint8

var (
	_MRPC_HEADER_FLAG                = [3]byte{0x4D, 0x49, 0x47}
	_MRPC_HEADER_NONBLOCK_SHIFT      = 4
	_MRPC_HEADER_HB_SHIFT            = 7
	_MRPC_HEADER_OW_SHIFT            = 6
	_MRPC_HEADER_RP_SHIFT            = 5
	_MRPC_HANDER_NONBLOCK_MASK       = uint8(0x01 << _MRPC_HEADER_NONBLOCK_SHIFT)
	_MRPC_HANDER_CPNPRESS_TYPE_MASK  = uint16(0x0F00)
	_NRPC_HEADER_CPNPRESS_TYPE_SHIFT = 8
	_MRPC_HEADER_PROTOCOL_MASK       = uint16(0x000F)
	_MRPC_HANDER_STATUS_CODE_MASK    = uint8(0x0F)
	_MRPC_HANDER_STATUS_CODE_SHIFT   = 8
	_MRPC_HANDER_SERI_MASK           = uint16(0x000F)
	_MRPC_HANDER_HB_MASK             = uint8(1 << _MRPC_HEADER_HB_SHIFT)
	_MRPC_HANDER_OW_MASK             = uint8(1 << _MRPC_HEADER_OW_SHIFT)
	_MRPC_HANDER_RP_MASK             = uint8(1 << _MRPC_HEADER_RP_SHIFT)

	_MRPC_PREFIX_SIZE = len(_MRPC_HEADER_FLAG) + 1

	MRPC_PACKAGE_MAX = 8 * 1024
)

const (
	_RPC_VERSION = uint8(0x1)
)

const (
	MRPSC_OK     = MRPC_PACKAGE_STATUS_CODE(0)
	MRPSC_FAILED = MRPC_PACKAGE_STATUS_CODE(1)
)

const (
	MRPC_CT_NO       = MRPC_PACKAGE_COMPRESS(0)
	MRPC_CT_DYNAIC   = MRPC_PACKAGE_COMPRESS(1)
	MRPC_CT_COMPRESS = MRPC_PACKAGE_COMPRESS(2)
)

const (
	MRPC_PT_JSON      = MRPC_PACKAGE_PROTOCOL(0)
	MRPC_PT_XML       = MRPC_PACKAGE_PROTOCOL(1)
	MRPC_PT_PROTOBUFF = MRPC_PACKAGE_PROTOCOL(2)
	MRPC_PT_FLATBUFF  = MRPC_PACKAGE_PROTOCOL(3)
)

const (
	MRPC_NETWORK_PROTOCOL_TCP = MRPC_NETWORK_PROTOCOL(0)
	MRPC_NETWORK_PROTOCOL_TLS = MRPC_NETWORK_PROTOCOL(1)
)

const (
	RS_OK      = RESPONSE_STATUS(0)
	RS_TIMEOUT = RESPONSE_STATUS(1)
	RS_FAILD   = RESPONSE_STATUS(2)
)

type _SYSBit uint

const (
	_SYS32 _SYSBit = 32
	_SYS64 _SYSBit = 64
)

func getSys() _SYSBit {
	return _SYSBit(32 << (^uint(0) >> 63))
}
